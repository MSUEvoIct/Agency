########################################################################################
# Introduction
########################################################################################
# Specifies the ECJ evolutionary environment for the Simternet agent-based model
#
# ECJ is responsible for generating the individual agents, which will have parameters
# and behavior determined by the evolutionary algorithms specified in this file.
# For each generation, ECJ creates a Simternet, adds the agents it has created to it,
# and allows Simternet to run.  Once the agent simulation has been completed, ECJ
# takes fitness information, based on the Simternet results, which it uses to create
# the next generation of agents.  This process repeats.


########################################################################################
# Global, High-level Configuration

parent.0 = ../../../../etc/evolve.properties


generations = 5000

seed.0 = 97816234


state		= ec.simple.SimpleEvolutionState
pop			= ec.Population
init		= ec.simple.SimpleInitializer
finish		= ec.simple.SimpleFinisher
breed		= ec.simple.SimpleBreeder
eval		= abce.models.iteratedpd.IteratedPDEvaluator
stat		= ec.simple.SimpleStatistics
exch		= ec.simple.SimpleExchanger

### KEY CONFIG, Specifies the Simternet Problem
# This is the class that will be evaluating our agents/individuals.
#eval.problem		= ec.simple.SimpleProblem

pop.subpops		= 1
pop.subpop.0		= ec.Subpopulation


iteratedPD.steps = 50
iteratedPD.evaluations = 20
iteratedPD.payoffBothCooperate = 5
iteratedPD.payoffWinner = 10
iteratedPD.payoffLoser = 1
iteratedPD.payoffBothDefect = 2


# Population Configuration
pop.subpop.0.size 		= 500
pop.subpop.0.duplicate-retries 	= 100

# Charactaristics of the Species' genome/representation
pop.subpop.0.species 		= ec.vector.VectorSpecies
pop.subpop.0.species.ind	= ec.vector.BitVectorIndividual
pop.subpop.0.species.genome-size = 92
pop.subpop.0.species.crossover-type = one
pop.subpop.0.species.mutation-prob = 0.01

#pop.subpop.0.species.agent	= simternet.agents.nsp.GPNetworkProvider

# How the fitness is evaluated
pop.subpop.0.species.fitness 	= ec.simple.SimpleFitness

# The EA pipeline for new NSP individuals.
# Parameters taken from koza.params
pop.subpop.0.species.pipe = ec.breed.MultiBreedingPipeline
pop.subpop.0.species.pipe.generate-max = false

# Subsidiary pipelines:
pop.subpop.0.species.pipe.num-sources = 3
pop.subpop.0.species.pipe.source.0 = ec.vector.breed.VectorCrossoverPipeline
pop.subpop.0.species.pipe.source.0.prob = 0.2
pop.subpop.0.species.pipe.source.0.source.0 = ec.select.TournamentSelection
pop.subpop.0.species.pipe.source.0.source.1 = ec.select.TournamentSelection
pop.subpop.0.species.pipe.source.1 = ec.breed.ReproductionPipeline
pop.subpop.0.species.pipe.source.1.prob = 0.7
pop.subpop.0.species.pipe.source.1.source.0 = ec.select.TournamentSelection
pop.subpop.0.species.pipe.source.2 = ec.vector.breed.VectorMutationPipeline
pop.subpop.0.species.pipe.source.2.prob = 0.1
pop.subpop.0.species.pipe.source.2.source.0 = ec.select.TournamentSelection


select.tournament.size = 2


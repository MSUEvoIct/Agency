########################################################################################
# Introduction
########################################################################################
# Specifies the ECJ evolutionary environment for the Agency agent-based model
#
# It is the first test case of using the Stimulus/Response EC system

########################################################################################
# Global, High-level Configuration

#verbosity	= 0

breedthreads	= 1
evalthreads	= 1
seed.0		= 4357
seed.1		= 4358
seed.2		= 4359
seed.3		= 4360
seed.4		= 4361
seed.5		= 4362
seed.6		= 4363
seed.7		= 4364
seed.8		= 4365
seed.9		= 4366
seed.10		= 4367
seed.11		= 4368
seed.12		= 4369
seed.13		= 4370
seed.14		= 4371
seed.15		= 4372
seed.16		= 4373
seed.17		= 4374
seed.18		= 4375
seed.19		= 4376
seed.20		= 4377
seed.21		= 4378
seed.22		= 4379
seed.23		= 4380
seed.24		= 4381
seed.25		= 4382
seed.26		= 4383
seed.27		= 4384
seed.28		= 4385
seed.29		= 4386
seed.30		= 4387
seed.31		= 4388

state		= abce.ecj.EPSimpleEvolutionState
pop		    = ec.Population
init		= ec.gp.GPInitializer
finish	    = ec.simple.SimpleFinisher
breed		= ec.simple.SimpleBreeder
eval		= abce.ecj.OligopolyEvaluator
stat		= ec.simple.SimpleStatistics
exch		= ec.simple.SimpleExchanger


generations = 1000

output_dir = output
event_file = etc/test_events.cfg

### KEY CONFIG, Specifies the Simternet Problem
# This is the class that will be evaluating our agents/individuals.
eval.problem		= abce.agency.ec.ecj.AgencyProblem
eval.problem.data = ec.app.tutorial4.DoubleData


quit-on-run-complete	= true
checkpoint		= false
prefix			= checkpoints
checkpoint-modulo	= 20

stat.file		= $out.stat

pop.subpops		   = 1
pop.subpop.0		= ec.Subpopulation
pop.subpop.1		= ec.Subpopulation

########################################################################################
# Agency Evaluation Configuration
########################################################################################
# Controls how the agents are placed within the simulation, and how the simulations are run.

# How many different simulations to split the agents up into.  Each population will be divided
# into this many segments, each of which is evaluated against each other.
agency.chunks = 500

# The number of concurrent simulation runs.  Cannot effectively be larger than the
# number of population chunks, since each chunk must be evaluated sequentially.
agency.threads = 24
agency.thread_timeout = 20

# Simternet checkpointing.  As opposed to ECJ checkpointing, which will store individuals,
# this creates checkpoints of Simternet simulations immediately after creation, so that
# we can load them and inspect how a particular simulation instance proceeded.
# simternet.checkpoint = true
# simternet.checkpoint-modulo = 1
# simternet.checkpoint.directory = data/checkpoints/simternet/

# How many steps to run the agent-based simulation
agency.steps = 50

# The configuration file to give Agency market simulation
agency.config = etc/oligopoly-config.cfg

########################################################################################
# SimpleFirm
########################################################################################
# General information
pop.subpop.0.size 		         = 1000
pop.subpop.0.duplicate-retries 	= 10

# Charactaristics of the Species' genome/representation
pop.subpop.0.species 		= ec.gp.GPSpecies
pop.subpop.0.species.ind	= abce.agency.ec.ecj.AgencyGPIndividual
pop.subpop.0.species.agent	= abce.agency.firm.ECJProdPriceFirm


# How the fitness is evaluated
pop.subpop.0.species.fitness 	= ec.simple.SimpleFitness


# Parameters taken from koza.params
pop.subpop.0.species.pipe = ec.breed.MultiBreedingPipeline
pop.subpop.0.species.pipe.generate-max = false

# Subsidiary pipelines:
pop.subpop.0.species.pipe.num-sources = 3
pop.subpop.0.species.pipe.source.0 = ec.gp.koza.CrossoverPipeline
pop.subpop.0.species.pipe.source.0.prob = 0.2
pop.subpop.0.species.pipe.source.1 = ec.breed.ReproductionPipeline
pop.subpop.0.species.pipe.source.1.prob = 0.7
pop.subpop.0.species.pipe.source.1.source.0 = ec.select.TournamentSelection
pop.subpop.0.species.pipe.source.2 = ec.gp.breed.MutateOneNodePipeline
pop.subpop.0.species.pipe.source.2.prob = 0.1
pop.subpop.0.species.pipe.source.2.source.0 = ec.select.TournamentSelection
pop.subpop.0.species.pipe.source.2.ns.0 = ec.gp.koza.KozaNodeSelector


# when adding something, remember to update gp.fs.size and gp.tc.size, and 
# pop.subpop.0.species.ind.numtrees

# Trees
pop.subpop.0.species.ind.numtrees = 2
pop.subpop.0.species.ind.tree.0 = ec.gp.GPTree
pop.subpop.0.species.ind.tree.0.tc = firmTC
pop.subpop.0.species.ind.tree.0.sr = abce.agency.firm.sr.ScaleFirmPriceSR
pop.subpop.0.species.ind.tree.1 = ec.gp.GPTree
pop.subpop.0.species.ind.tree.1.tc = firmTC
pop.subpop.0.species.ind.tree.1.sr = abce.agency.firm.sr.ScaleFirmProductionSR


###############################################################
# General GP configuration, used by ECJ's GP Engine
# Tree Constraints
###############################################################
gp.tc.size = 1

gp.tc.0 = ec.gp.GPTreeConstraints
gp.tc.0.init = ec.gp.koza.HalfBuilder
gp.tc.0.name = firmTC
gp.tc.0.fset = firmFS
gp.tc.0.returns = root_type

# Sets of allowable functions
gp.fs.size = 4

# Boolean operators and terminals
# -------------------------------
gp.fs.0 = ec.gp.GPFunctionSet
gp.fs.0.size = 7
gp.fs.0.name = booleans
gp.fs.0.func.0 = abce.agency.ec.ecj.operators.NotGP
gp.fs.0.func.0.nc = boolUnaryOperator
gp.fs.0.func.1 = abce.agency.ec.ecj.operators.AndGP
gp.fs.0.func.1.nc = boolBinaryOperator
gp.fs.0.func.2 = abce.agency.ec.ecj.operators.NotAndGP
gp.fs.0.func.2.nc = boolBinaryOperator
gp.fs.0.func.3 = abce.agency.ec.ecj.operators.OrGP
gp.fs.0.func.3.nc = boolBinaryOperator
gp.fs.0.func.4 = abce.agency.ec.ecj.operators.XOrGP
gp.fs.0.func.4.nc = boolBinaryOperator
gp.fs.0.func.5 = abce.agency.ec.ecj.terminals.TrueGP
gp.fs.0.func.5.nc = boolean
gp.fs.0.func.6 = abce.agency.ec.ecj.terminals.FalseGP
gp.fs.0.func.6.nc = boolean


# Double operators and terminals
# ------------------------------
gp.fs.1 = ec.gp.GPFunctionSet
gp.fs.1.size = 7
gp.fs.1.name = doubles
gp.fs.1.func.0 = abce.agency.ec.ecj.operators.AddGP
gp.fs.1.func.0.nc = doubleOperatorSimple
gp.fs.1.func.1 = abce.agency.ec.ecj.operators.SubtractGP
gp.fs.1.func.1.nc = doubleOperatorSimple
gp.fs.1.func.2 = abce.agency.ec.ecj.operators.MultiplyGP
gp.fs.1.func.2.nc = doubleOperatorSimple
gp.fs.1.func.3 = abce.agency.ec.ecj.operators.DivideGP
gp.fs.1.func.3.nc = doubleOperatorSimple
# an if statement, one tree if true, another if false.
gp.fs.1.func.4 = abce.agency.ec.ecj.operators.DoubleSelector
gp.fs.1.func.4.nc = decisionDouble
gp.fs.1.func.5 = abce.agency.ec.ecj.operators.GreaterThanGP
gp.fs.1.func.5.nc = compareDouble
gp.fs.1.func.6 = abce.agency.ec.ecj.operators.LessThanGP
gp.fs.1.func.6.nc = compareDouble


# StimulusResponse operators and terminals
# ----------------------------------------
gp.fs.2 = ec.gp.GPFunctionSet
gp.fs.2.size = 3
gp.fs.2.name = stimulus_response
gp.fs.2.func.0 = abce.agency.ec.ecj.operators.ResponseGP
gp.fs.2.func.0.nc = responseType
gp.fs.2.func.1 = abce.agency.ec.ecj.terminals.NumericalStimulusERC
gp.fs.2.func.1.nc = double
gp.fs.2.func.2 = abce.agency.ec.ecj.GPRuleSet
gp.fs.2.func.2.nc = gp_ruleset


# Function set for EC firm trees
# -----------------------------------------
gp.fs.3 = abce.agency.ec.ecj.GPFunctionSetSet
gp.fs.3.size = 3
gp.fs.3.name = firmFS
gp.fs.3.funcSet.0 = gp.fs.0
gp.fs.3.funcSet.1 = gp.fs.1
gp.fs.3.funcSet.2 = gp.fs.2





########################################################################################
# General GP representation defaults, taken from ECJ's koza.params (types, etc...)
########################################################################################
#types
gp.type.a.size = 5
gp.type.a.0.name = double
gp.type.a.1.name = boolean
gp.type.a.2.name = integer
gp.type.a.3.name = root_type
gp.type.a.4.name = rule_func




#########################################################################################
# Node Constraints
#########################################################################################
gp.nc.size = 9

gp.nc.0 = ec.gp.GPNodeConstraints
gp.nc.0.name = double
gp.nc.0.returns = double
gp.nc.0.size = 0

gp.nc.1 = ec.gp.GPNodeConstraints
gp.nc.1.name = boolean
gp.nc.1.returns = boolean
gp.nc.1.size = 0

gp.nc.2 = ec.gp.GPNodeConstraints
gp.nc.2.name = doubleOperatorSimple
gp.nc.2.returns = double
gp.nc.2.size = 2
gp.nc.2.child.0 = double
gp.nc.2.child.1 = double

gp.nc.3 = ec.gp.GPNodeConstraints
gp.nc.3.name = decisionDouble
gp.nc.3.returns = double
gp.nc.3.size = 3
gp.nc.3.child.0 = boolean
gp.nc.3.child.1 = double
gp.nc.3.child.2 = double

gp.nc.4 = ec.gp.GPNodeConstraints
gp.nc.4.name = compareDouble
gp.nc.4.returns = boolean
gp.nc.4.size = 2
gp.nc.4.child.0 = double
gp.nc.4.child.1 = double

gp.nc.5 = ec.gp.GPNodeConstraints
gp.nc.5.name = boolUnaryOperator
gp.nc.5.returns = boolean
gp.nc.5.size = 1
gp.nc.5.child.0 = boolean

gp.nc.6 = ec.gp.GPNodeConstraints
gp.nc.6.name = boolBinaryOperator
gp.nc.6.size = 2
gp.nc.6.returns = boolean
gp.nc.6.child.0 = boolean
gp.nc.6.child.1 = boolean


gp.nc.7 = ec.gp.GPNodeConstraints
gp.nc.7.name = responseType
gp.nc.7.returns = rule_func
gp.nc.7.size = 2
gp.nc.7.child.0 = boolean
gp.nc.7.child.1 = double


gp.nc.8 = ec.gp.GPNodeConstraints
gp.nc.8.name = gp_ruleset
gp.nc.8.returns = root_type
gp.nc.8.size = 2
gp.nc.8.child.0 = rule_func
gp.nc.8.child.1 = rule_func
gp.nc.8.child.2 = rule_func
gp.nc.8.child.3 = rule_func
gp.nc.8.child.4 = rule_func
gp.nc.8.child.5 = rule_func
gp.nc.8.child.6 = rule_func
gp.nc.8.child.7 = rule_func
gp.nc.8.child.8 = rule_func
gp.nc.8.child.9 = rule_func
gp.nc.8.child.10 = rule_func
gp.nc.8.child.11 = rule_func
gp.nc.8.child.12 = rule_func
gp.nc.8.child.13 = rule_func
gp.nc.8.child.14 = rule_func
gp.nc.8.child.15 = rule_func
gp.nc.8.child.16 = rule_func
gp.nc.8.child.17 = rule_func
gp.nc.8.child.18 = rule_func
gp.nc.8.child.19 = rule_func


########################################################################################
# General GP reproduction defaults, taken from ECJ's koza.params
########################################################################################
# Here we define the default values for Crossover,
# Reproduction, Mutation, as well as our selection
# approaches (Koza I).  These can be overridden on a per-species
# level of course.
#

# Reproduction will use Tournament Selection 
breed.reproduce.source.0 = ec.select.TournamentSelection

# Crossover will use Tournament Selection, try only 1
# time, have a max depth of 17, and use KozaNodeSelector
gp.koza.xover.source.0 = ec.select.TournamentSelection
gp.koza.xover.source.1 = same
gp.koza.xover.ns.0 = ec.gp.koza.KozaNodeSelector
gp.koza.xover.ns.1 = same
gp.koza.xover.maxdepth = 3

# This is the default for Koza and lil-gp, though it's
# a little wimpy; on the other hand, a higher number can
# make things really slow
gp.koza.xover.tries = 1

# Point Mutation will use Tournament Selection, try only 1
# time, have a max depth of 17, and use KozaNodeSelector
# and GROW for building.  Also, Point Mutation uses a GrowBuilder
# by default, with a default of min-depth=max-depth=5
# as shown a ways below
gp.koza.mutate.source.0 = ec.select.TournamentSelection
gp.koza.mutate.ns.0 = ec.gp.koza.KozaNodeSelector
gp.koza.mutate.build.0 = ec.gp.koza.GrowBuilder
gp.koza.mutate.maxdepth = 3
# This is the default for Koza and lil-gp, though it's
# a little wimpy; on the other hand, a higher number can
# make things really slow
gp.koza.mutate.tries = 1

# The default tournament size for TournamentSelection is 7
# kk - try 2, more likely to get diversity?
select.tournament.size = 5

gp.koza.half.min-depth = 2
gp.koza.half.max-depth = 6
gp.koza.half.growp = 0.5

# Since GROW is only used for subtree mutation, ECJ uses
# the Koza-standard subtree mutation GROW values for the
# default for GROW as a whole.  This default is
# min-depth=max-depth=5, which I don't like very much,
# but hey, that's the standard.  
# This means that if someone decided to use GROW to generate
# new individual trees, it's also use the defaults below
# unless he overrided them locally.
gp.koza.grow.min-depth = 3
gp.koza.grow.max-depth = 3

# We specify a few things about ADFs  -- what kind 
# of stack they use, and what kind of context
gp.problem.stack = ec.gp.ADFStack
gp.adf-stack.context = ec.gp.ADFContext

# Here we define the default values for KozaNodeSelection;
# as always, these can be overridden by values hanging off
# of the Crossover/Reproduction/Mutation/whatever pipelines,
# like we did for node-building, but hey, whatever. 
# The default is 10% terminals, 90% nonterminals when possible,
# 0% "always pick the root", 0% "pick any node"
gp.koza.ns.terminals = 0.1
gp.koza.ns.nonterminals = 0.85
gp.koza.ns.root = 0.05






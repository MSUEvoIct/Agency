########################################################################################
# Introduction
########################################################################################
# Specifies the ECJ evolutionary environment for the Simternet agent-based model
#
# ECJ is responsible for generating the individual agents, which will have parameters
# and behavior determined by the evolutionary algorithms specified in this file.
# For each generation, ECJ creates a Simternet, adds the agents it has created to it,
# and allows Simternet to run.  Once the agent simulation has been completed, ECJ
# takes fitness information, based on the Simternet results, which it uses to create
# the next generation of agents.  This process repeats.


########################################################################################
# Global, High-level Configuration

#verbosity	= 0

generations = 10

breedthreads	= 4
evalthreads	= 1
seed.0		= 4357
seed.1		= 4358
seed.2		= 4359
seed.3		= 4360


state		= ec.simple.SimpleEvolutionState
pop			= ec.Population
init		= ec.simple.SimpleInitializer
finish		= ec.simple.SimpleFinisher
breed		= ec.simple.SimpleBreeder

# Output stats to console
stat		= ec.simple.SimpleStatistics
stat.file		= $out.stat

exch		= ec.simple.SimpleExchanger

# This is a generic evaluator that should work with all simulations
eval		= abce.agency.ec.ecj.AgencyEvaluator

# This is the class responsible for taking the ECJ population
#  and creating groups of agents to be evaluated together.
eval.groupcreator = abce.agency.ec.ecj.RandomFlatGroupCreator

# How many individuals will be placed in the simulation together?
eval.groupcreator.groupSize = 3

# How many times we should go through the population?
eval.groupcreator.rounds = 4


# The simulations must not have any dependencies on each other,
#  but the benefit is that they can be run simultaneously
#  when it is desirable to speed up a single evolutionary run.
#  E.g., for intermediate/debugging runs, where HPCC resource
#  scheduling is not a concern.
# A single-threaded version of this might be more appropriate for
#  batch HPCC runs.
#eval.simrunner = abce.agency.ec.ecj.ThreadPoolRunner
#eval.simrunner.threads = 4
# Rather than using ECJ-thread seeds, the evaluator will assign
#  seeds to simulations based on this starting seed.
eval.simrunner = abce.agency.ec.ecj.LoopRunner
eval.simrunner.seed = 1234

# This specifies the simulation that will be used to evaluate the
#  individuals.  It must implement ec.Setup and initialize its
#  parameters from this file.
eval.simrunner.sim = abce.models.io.investment.InvestmentModel
eval.simrunner.sim.numMarkets = 10
eval.simrunner.sim.numSteps = 20
eval.simrunner.sim.laborExponent = 0.5
eval.simrunner.sim.capitalExponent = 0.5
eval.simrunner.sim.laborCost = 1
eval.simrunner.sim.capitalCost = 1
eval.simrunner.sim.firmEndowment = 1000000.0

eval.simrunner.sim.maximumWTP = 100
eval.simrunner.sim.qtyRatio = 1.0
eval.simrunner.sim.qtyExponent = 1.0



### KEY CONFIG, Specifies the Simternet Problem
# This is the class that will be evaluating our agents/individuals.
# UPDATE: eval.problem is no longer used in this way; it has been replaced
# by the AgencyEvaluator system.
eval.problem		= abce.models.io.iterated.cournot.IteratedCournotProblem


quit-on-run-complete	= true
checkpoint		= true
prefix			= checkpoints/ecj/generation
checkpoint-modulo	= 100


pop.subpops		= 1
pop.subpop.0		= ec.Subpopulation


# Population Configuration
pop.subpop.0.size 		= 1000
pop.subpop.0.duplicate-retries 	= 10

# Charactaristics of the Species' genome/representation
pop.subpop.0.species 		= ec.vector.FloatVectorSpecies
pop.subpop.0.species.min-gene = 0
pop.subpop.0.species.max-gene = 500
pop.subpop.0.species.mutation-type = gauss
pop.subpop.0.species.mutation-stdev = 4
pop.subpop.0.species.out-of-bounds-retries = 20

pop.subpop.0.species.ind	= abce.models.io.investment.FixedQuantityAgent
pop.subpop.0.species.genome-size = 2
pop.subpop.0.species.crossover-type = one
pop.subpop.0.species.mutation-prob = 0.04

#pop.subpop.0.species.agent	= simternet.agents.nsp.GPNetworkProvider

# How the fitness is evaluated
pop.subpop.0.species.fitness 	= ec.simple.SimpleFitness

# The EA pipeline for new NSP individuals.
# Parameters taken from koza.params
pop.subpop.0.species.pipe = ec.breed.MultiBreedingPipeline
pop.subpop.0.species.pipe.generate-max = false
# Subsidiary pipelines:
pop.subpop.0.species.pipe.num-sources = 3
pop.subpop.0.species.pipe.source.0 = ec.vector.breed.VectorCrossoverPipeline
pop.subpop.0.species.pipe.source.0.prob = 0.2
pop.subpop.0.species.pipe.source.0.source.0 = ec.select.TournamentSelection
pop.subpop.0.species.pipe.source.0.source.1 = ec.select.TournamentSelection
pop.subpop.0.species.pipe.source.1 = ec.breed.ReproductionPipeline
pop.subpop.0.species.pipe.source.1.prob = 0.3
pop.subpop.0.species.pipe.source.1.source.0 = ec.select.TournamentSelection
pop.subpop.0.species.pipe.source.2 = ec.vector.breed.VectorMutationPipeline
pop.subpop.0.species.pipe.source.2.prob = 0.5
pop.subpop.0.species.pipe.source.2.source.0 = ec.select.TournamentSelection


select.tournament.size = 3


########################################################################################
# Introduction
########################################################################################
# Specifies the ECJ evolutionary environment for the Simternet agent-based model
#
# ECJ is responsible for generating the individual agents, which will have parameters
# and behavior determined by the evolutionary algorithms specified in this file.
# For each generation, ECJ creates a Simternet, adds the agents it has created to it,
# and allows Simternet to run.  Once the agent simulation has been completed, ECJ
# takes fitness information, based on the Simternet results, which it uses to create
# the next generation of agents.  This process repeats.


########################################################################################
# Global, High-level Configuration

#verbosity	= 0

breedthreads	= 4
evalthreads	= 1
seed.0		= 4357
seed.1		= 4358
seed.2		= 4359
seed.3		= 4360
seed.4		= 4361
seed.5		= 4362
seed.6		= 4363
seed.7		= 4364
seed.8		= 4365
seed.9		= 4366
seed.10		= 4367
seed.11		= 4368
seed.12		= 4369
seed.13		= 4370
seed.14		= 4371
seed.15		= 4372
seed.16		= 4373
seed.17		= 4374
seed.18		= 4375
seed.19		= 4376
seed.20		= 4377
seed.21		= 4378
seed.22		= 4379
seed.23		= 4380
seed.24		= 4381
seed.25		= 4382
seed.26		= 4383
seed.27		= 4384
seed.28		= 4385
seed.29		= 4386
seed.30		= 4387
seed.31		= 4388

state		= ec.simple.SimpleEvolutionState
pop			= ec.Population
init		= ec.simple.SimpleInitializer
finish		= ec.simple.SimpleFinisher
breed		= ec.simple.SimpleBreeder
eval		= abce.models.io.iterated.cournot.IteratedCournotEvaluator
stat		= ec.simple.SimpleStatistics
exch		= ec.simple.SimpleExchanger

### KEY CONFIG, Specifies the Simternet Problem
# This is the class that will be evaluating our agents/individuals.
eval.problem		= abce.models.io.iterated.cournot.IteratedCournotProblem


quit-on-run-complete	= true
checkpoint		= true
prefix			= data/checkpoints/ecj/generation
checkpoint-modulo	= 40

stat.file		= $out.stat

pop.subpops		= 1
pop.subpop.0		= ec.Subpopulation


iteratedCournot.steps = 50
generations = 1000

# Population Configuration
pop.subpop.0.size 		= 10000
pop.subpop.0.duplicate-retries 	= 100

# Charactaristics of the Species' genome/representation
pop.subpop.0.species 		= ec.vector.VectorSpecies
pop.subpop.0.species.ind	= ec.vector.BitVectorIndividual
pop.subpop.0.species.genome-size = 8192
pop.subpop.0.species.crossover-type = one
pop.subpop.0.species.mutation-prob = 0.01

#pop.subpop.0.species.agent	= simternet.agents.nsp.GPNetworkProvider

# How the fitness is evaluated
pop.subpop.0.species.fitness 	= ec.simple.SimpleFitness

# The EA pipeline for new NSP individuals.
# Parameters taken from koza.params
pop.subpop.0.species.pipe = ec.breed.MultiBreedingPipeline
pop.subpop.0.species.pipe.generate-max = false
# Subsidiary pipelines:
pop.subpop.0.species.pipe.num-sources = 3
pop.subpop.0.species.pipe.source.0 = ec.vector.breed.VectorCrossoverPipeline
pop.subpop.0.species.pipe.source.0.prob = 0.2
pop.subpop.0.species.pipe.source.0.source.0 = ec.select.TournamentSelection
pop.subpop.0.species.pipe.source.0.source.1 = ec.select.TournamentSelection
pop.subpop.0.species.pipe.source.1 = ec.breed.ReproductionPipeline
pop.subpop.0.species.pipe.source.1.prob = 0.7
pop.subpop.0.species.pipe.source.1.source.0 = ec.select.TournamentSelection
pop.subpop.0.species.pipe.source.2 = ec.vector.breed.VectorMutationPipeline
pop.subpop.0.species.pipe.source.2.prob = 0.1
pop.subpop.0.species.pipe.source.2.source.0 = ec.select.TournamentSelection
#pop.subpop.0.species.pipe.source.2.ns.0 = ec.gp.koza.KozaNodeSelector


select.tournament.size = 5

